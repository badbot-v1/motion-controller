// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: botstatus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_botstatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_botstatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "consts.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_botstatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_botstatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_botstatus_2eproto;
namespace badbot {
namespace messages {
class BotStatus;
class BotStatusDefaultTypeInternal;
extern BotStatusDefaultTypeInternal _BotStatus_default_instance_;
class SystemLoadAvg;
class SystemLoadAvgDefaultTypeInternal;
extern SystemLoadAvgDefaultTypeInternal _SystemLoadAvg_default_instance_;
}  // namespace messages
}  // namespace badbot
PROTOBUF_NAMESPACE_OPEN
template<> ::badbot::messages::BotStatus* Arena::CreateMaybeMessage<::badbot::messages::BotStatus>(Arena*);
template<> ::badbot::messages::SystemLoadAvg* Arena::CreateMaybeMessage<::badbot::messages::SystemLoadAvg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace badbot {
namespace messages {

// ===================================================================

class SystemLoadAvg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:badbot.messages.SystemLoadAvg) */ {
 public:
  SystemLoadAvg();
  virtual ~SystemLoadAvg();

  SystemLoadAvg(const SystemLoadAvg& from);
  SystemLoadAvg(SystemLoadAvg&& from) noexcept
    : SystemLoadAvg() {
    *this = ::std::move(from);
  }

  inline SystemLoadAvg& operator=(const SystemLoadAvg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemLoadAvg& operator=(SystemLoadAvg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SystemLoadAvg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SystemLoadAvg* internal_default_instance() {
    return reinterpret_cast<const SystemLoadAvg*>(
               &_SystemLoadAvg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemLoadAvg& a, SystemLoadAvg& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemLoadAvg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemLoadAvg* New() const final {
    return CreateMaybeMessage<SystemLoadAvg>(nullptr);
  }

  SystemLoadAvg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemLoadAvg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SystemLoadAvg& from);
  void MergeFrom(const SystemLoadAvg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemLoadAvg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "badbot.messages.SystemLoadAvg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_botstatus_2eproto);
    return ::descriptor_table_botstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOneMinFieldNumber = 1,
    kFiveMinFieldNumber = 2,
    kFifteenMinFieldNumber = 3,
    kNumCoresFieldNumber = 4,
    kTotalRamFieldNumber = 5,
    kFreeRamFieldNumber = 6,
    kTotalSwapFieldNumber = 7,
    kFreeSwapFieldNumber = 8,
  };
  // float oneMin = 1;
  void clear_onemin();
  float onemin() const;
  void set_onemin(float value);

  // float fiveMin = 2;
  void clear_fivemin();
  float fivemin() const;
  void set_fivemin(float value);

  // float fifteenMin = 3;
  void clear_fifteenmin();
  float fifteenmin() const;
  void set_fifteenmin(float value);

  // int32 numCores = 4;
  void clear_numcores();
  ::PROTOBUF_NAMESPACE_ID::int32 numcores() const;
  void set_numcores(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 totalRam = 5;
  void clear_totalram();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalram() const;
  void set_totalram(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 freeRam = 6;
  void clear_freeram();
  ::PROTOBUF_NAMESPACE_ID::uint32 freeram() const;
  void set_freeram(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 totalSwap = 7;
  void clear_totalswap();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalswap() const;
  void set_totalswap(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 freeSwap = 8;
  void clear_freeswap();
  ::PROTOBUF_NAMESPACE_ID::uint32 freeswap() const;
  void set_freeswap(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:badbot.messages.SystemLoadAvg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float onemin_;
  float fivemin_;
  float fifteenmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 numcores_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalram_;
  ::PROTOBUF_NAMESPACE_ID::uint32 freeram_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalswap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 freeswap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_botstatus_2eproto;
};
// -------------------------------------------------------------------

class BotStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:badbot.messages.BotStatus) */ {
 public:
  BotStatus();
  virtual ~BotStatus();

  BotStatus(const BotStatus& from);
  BotStatus(BotStatus&& from) noexcept
    : BotStatus() {
    *this = ::std::move(from);
  }

  inline BotStatus& operator=(const BotStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotStatus& operator=(BotStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BotStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BotStatus* internal_default_instance() {
    return reinterpret_cast<const BotStatus*>(
               &_BotStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BotStatus& a, BotStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BotStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotStatus* New() const final {
    return CreateMaybeMessage<BotStatus>(nullptr);
  }

  BotStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotStatus& from);
  void MergeFrom(const BotStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "badbot.messages.BotStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_botstatus_2eproto);
    return ::descriptor_table_botstatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSysLoadAvgFieldNumber = 8,
    kModeFieldNumber = 3,
    kLidarEnabledFieldNumber = 1,
    kLidarRecordingEnabledFieldNumber = 2,
    kAppSrcEnabledFieldNumber = 4,
    kWsVideoEnabledFieldNumber = 5,
    kTelemetryEnabledFieldNumber = 6,
    kImuHealthyFieldNumber = 7,
    kGpsHealthyFieldNumber = 9,
    kMotorControllerHealthyFieldNumber = 10,
  };
  // .badbot.messages.SystemLoadAvg sysLoadAvg = 8;
  bool has_sysloadavg() const;
  void clear_sysloadavg();
  const ::badbot::messages::SystemLoadAvg& sysloadavg() const;
  ::badbot::messages::SystemLoadAvg* release_sysloadavg();
  ::badbot::messages::SystemLoadAvg* mutable_sysloadavg();
  void set_allocated_sysloadavg(::badbot::messages::SystemLoadAvg* sysloadavg);

  // .badbot.messages.OperationalMode mode = 3;
  void clear_mode();
  ::badbot::messages::OperationalMode mode() const;
  void set_mode(::badbot::messages::OperationalMode value);

  // bool lidarEnabled = 1;
  void clear_lidarenabled();
  bool lidarenabled() const;
  void set_lidarenabled(bool value);

  // bool lidarRecordingEnabled = 2;
  void clear_lidarrecordingenabled();
  bool lidarrecordingenabled() const;
  void set_lidarrecordingenabled(bool value);

  // bool appSrcEnabled = 4;
  void clear_appsrcenabled();
  bool appsrcenabled() const;
  void set_appsrcenabled(bool value);

  // bool wsVideoEnabled = 5;
  void clear_wsvideoenabled();
  bool wsvideoenabled() const;
  void set_wsvideoenabled(bool value);

  // bool telemetryEnabled = 6;
  void clear_telemetryenabled();
  bool telemetryenabled() const;
  void set_telemetryenabled(bool value);

  // bool imuHealthy = 7;
  void clear_imuhealthy();
  bool imuhealthy() const;
  void set_imuhealthy(bool value);

  // bool gpsHealthy = 9;
  void clear_gpshealthy();
  bool gpshealthy() const;
  void set_gpshealthy(bool value);

  // bool motorControllerHealthy = 10;
  void clear_motorcontrollerhealthy();
  bool motorcontrollerhealthy() const;
  void set_motorcontrollerhealthy(bool value);

  // @@protoc_insertion_point(class_scope:badbot.messages.BotStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::badbot::messages::SystemLoadAvg* sysloadavg_;
  int mode_;
  bool lidarenabled_;
  bool lidarrecordingenabled_;
  bool appsrcenabled_;
  bool wsvideoenabled_;
  bool telemetryenabled_;
  bool imuhealthy_;
  bool gpshealthy_;
  bool motorcontrollerhealthy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_botstatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemLoadAvg

// float oneMin = 1;
inline void SystemLoadAvg::clear_onemin() {
  onemin_ = 0;
}
inline float SystemLoadAvg::onemin() const {
  // @@protoc_insertion_point(field_get:badbot.messages.SystemLoadAvg.oneMin)
  return onemin_;
}
inline void SystemLoadAvg::set_onemin(float value) {
  
  onemin_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.SystemLoadAvg.oneMin)
}

// float fiveMin = 2;
inline void SystemLoadAvg::clear_fivemin() {
  fivemin_ = 0;
}
inline float SystemLoadAvg::fivemin() const {
  // @@protoc_insertion_point(field_get:badbot.messages.SystemLoadAvg.fiveMin)
  return fivemin_;
}
inline void SystemLoadAvg::set_fivemin(float value) {
  
  fivemin_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.SystemLoadAvg.fiveMin)
}

// float fifteenMin = 3;
inline void SystemLoadAvg::clear_fifteenmin() {
  fifteenmin_ = 0;
}
inline float SystemLoadAvg::fifteenmin() const {
  // @@protoc_insertion_point(field_get:badbot.messages.SystemLoadAvg.fifteenMin)
  return fifteenmin_;
}
inline void SystemLoadAvg::set_fifteenmin(float value) {
  
  fifteenmin_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.SystemLoadAvg.fifteenMin)
}

// int32 numCores = 4;
inline void SystemLoadAvg::clear_numcores() {
  numcores_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemLoadAvg::numcores() const {
  // @@protoc_insertion_point(field_get:badbot.messages.SystemLoadAvg.numCores)
  return numcores_;
}
inline void SystemLoadAvg::set_numcores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  numcores_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.SystemLoadAvg.numCores)
}

// uint32 totalRam = 5;
inline void SystemLoadAvg::clear_totalram() {
  totalram_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemLoadAvg::totalram() const {
  // @@protoc_insertion_point(field_get:badbot.messages.SystemLoadAvg.totalRam)
  return totalram_;
}
inline void SystemLoadAvg::set_totalram(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalram_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.SystemLoadAvg.totalRam)
}

// uint32 freeRam = 6;
inline void SystemLoadAvg::clear_freeram() {
  freeram_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemLoadAvg::freeram() const {
  // @@protoc_insertion_point(field_get:badbot.messages.SystemLoadAvg.freeRam)
  return freeram_;
}
inline void SystemLoadAvg::set_freeram(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  freeram_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.SystemLoadAvg.freeRam)
}

// uint32 totalSwap = 7;
inline void SystemLoadAvg::clear_totalswap() {
  totalswap_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemLoadAvg::totalswap() const {
  // @@protoc_insertion_point(field_get:badbot.messages.SystemLoadAvg.totalSwap)
  return totalswap_;
}
inline void SystemLoadAvg::set_totalswap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  totalswap_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.SystemLoadAvg.totalSwap)
}

// uint32 freeSwap = 8;
inline void SystemLoadAvg::clear_freeswap() {
  freeswap_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SystemLoadAvg::freeswap() const {
  // @@protoc_insertion_point(field_get:badbot.messages.SystemLoadAvg.freeSwap)
  return freeswap_;
}
inline void SystemLoadAvg::set_freeswap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  freeswap_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.SystemLoadAvg.freeSwap)
}

// -------------------------------------------------------------------

// BotStatus

// bool lidarEnabled = 1;
inline void BotStatus::clear_lidarenabled() {
  lidarenabled_ = false;
}
inline bool BotStatus::lidarenabled() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.lidarEnabled)
  return lidarenabled_;
}
inline void BotStatus::set_lidarenabled(bool value) {
  
  lidarenabled_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BotStatus.lidarEnabled)
}

// bool lidarRecordingEnabled = 2;
inline void BotStatus::clear_lidarrecordingenabled() {
  lidarrecordingenabled_ = false;
}
inline bool BotStatus::lidarrecordingenabled() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.lidarRecordingEnabled)
  return lidarrecordingenabled_;
}
inline void BotStatus::set_lidarrecordingenabled(bool value) {
  
  lidarrecordingenabled_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BotStatus.lidarRecordingEnabled)
}

// .badbot.messages.OperationalMode mode = 3;
inline void BotStatus::clear_mode() {
  mode_ = 0;
}
inline ::badbot::messages::OperationalMode BotStatus::mode() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.mode)
  return static_cast< ::badbot::messages::OperationalMode >(mode_);
}
inline void BotStatus::set_mode(::badbot::messages::OperationalMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BotStatus.mode)
}

// bool appSrcEnabled = 4;
inline void BotStatus::clear_appsrcenabled() {
  appsrcenabled_ = false;
}
inline bool BotStatus::appsrcenabled() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.appSrcEnabled)
  return appsrcenabled_;
}
inline void BotStatus::set_appsrcenabled(bool value) {
  
  appsrcenabled_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BotStatus.appSrcEnabled)
}

// bool wsVideoEnabled = 5;
inline void BotStatus::clear_wsvideoenabled() {
  wsvideoenabled_ = false;
}
inline bool BotStatus::wsvideoenabled() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.wsVideoEnabled)
  return wsvideoenabled_;
}
inline void BotStatus::set_wsvideoenabled(bool value) {
  
  wsvideoenabled_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BotStatus.wsVideoEnabled)
}

// bool telemetryEnabled = 6;
inline void BotStatus::clear_telemetryenabled() {
  telemetryenabled_ = false;
}
inline bool BotStatus::telemetryenabled() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.telemetryEnabled)
  return telemetryenabled_;
}
inline void BotStatus::set_telemetryenabled(bool value) {
  
  telemetryenabled_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BotStatus.telemetryEnabled)
}

// bool imuHealthy = 7;
inline void BotStatus::clear_imuhealthy() {
  imuhealthy_ = false;
}
inline bool BotStatus::imuhealthy() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.imuHealthy)
  return imuhealthy_;
}
inline void BotStatus::set_imuhealthy(bool value) {
  
  imuhealthy_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BotStatus.imuHealthy)
}

// .badbot.messages.SystemLoadAvg sysLoadAvg = 8;
inline bool BotStatus::has_sysloadavg() const {
  return this != internal_default_instance() && sysloadavg_ != nullptr;
}
inline void BotStatus::clear_sysloadavg() {
  if (GetArenaNoVirtual() == nullptr && sysloadavg_ != nullptr) {
    delete sysloadavg_;
  }
  sysloadavg_ = nullptr;
}
inline const ::badbot::messages::SystemLoadAvg& BotStatus::sysloadavg() const {
  const ::badbot::messages::SystemLoadAvg* p = sysloadavg_;
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.sysLoadAvg)
  return p != nullptr ? *p : *reinterpret_cast<const ::badbot::messages::SystemLoadAvg*>(
      &::badbot::messages::_SystemLoadAvg_default_instance_);
}
inline ::badbot::messages::SystemLoadAvg* BotStatus::release_sysloadavg() {
  // @@protoc_insertion_point(field_release:badbot.messages.BotStatus.sysLoadAvg)
  
  ::badbot::messages::SystemLoadAvg* temp = sysloadavg_;
  sysloadavg_ = nullptr;
  return temp;
}
inline ::badbot::messages::SystemLoadAvg* BotStatus::mutable_sysloadavg() {
  
  if (sysloadavg_ == nullptr) {
    auto* p = CreateMaybeMessage<::badbot::messages::SystemLoadAvg>(GetArenaNoVirtual());
    sysloadavg_ = p;
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BotStatus.sysLoadAvg)
  return sysloadavg_;
}
inline void BotStatus::set_allocated_sysloadavg(::badbot::messages::SystemLoadAvg* sysloadavg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sysloadavg_;
  }
  if (sysloadavg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sysloadavg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sysloadavg, submessage_arena);
    }
    
  } else {
    
  }
  sysloadavg_ = sysloadavg;
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BotStatus.sysLoadAvg)
}

// bool gpsHealthy = 9;
inline void BotStatus::clear_gpshealthy() {
  gpshealthy_ = false;
}
inline bool BotStatus::gpshealthy() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.gpsHealthy)
  return gpshealthy_;
}
inline void BotStatus::set_gpshealthy(bool value) {
  
  gpshealthy_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BotStatus.gpsHealthy)
}

// bool motorControllerHealthy = 10;
inline void BotStatus::clear_motorcontrollerhealthy() {
  motorcontrollerhealthy_ = false;
}
inline bool BotStatus::motorcontrollerhealthy() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BotStatus.motorControllerHealthy)
  return motorcontrollerhealthy_;
}
inline void BotStatus::set_motorcontrollerhealthy(bool value) {
  
  motorcontrollerhealthy_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BotStatus.motorControllerHealthy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace badbot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_botstatus_2eproto
