// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consts.proto

#include "consts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace badbot {
namespace messages {
}  // namespace messages
}  // namespace badbot
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_consts_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_consts_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_consts_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_consts_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_consts_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014consts.proto\022\017badbot.messages*\366\001\n\013Mess"
  "ageType\022\016\n\nSTATUS_BOT\020\000\022\016\n\nCMD_TOGGLE\020\001\022"
  "\030\n\024CMD_OPERATIONAL_MODE\020\002\022\027\n\023CMD_TELEOP_"
  "MOVEMENT\020\003\022\020\n\014HEARTBEAT_RC\020\004\022\017\n\013VIDEO_FR"
  "AME\020\005\022\014\n\010TELE_IMU\020\006\022\016\n\nTELE_LIDAR\020\007\022\014\n\010T"
  "ELE_GPS\020\010\022\026\n\022VPM_OBJ_DET_COORDS\020\t\022\031\n\025TEL"
  "E_DRIVELINE_STATUS\020\n\022\022\n\016TELE_LIDAR_POI\020\013"
  "*F\n\017OperationalMode\022\n\n\006TELEOP\020\000\022\r\n\tFOLLO"
  "W_ME\020\001\022\016\n\nAUTONOMOUS\020\002\022\010\n\004IDLE\020\004*\226\001\n\007Dev"
  "ices\022\t\n\005LIDAR\020\000\022\020\n\014LIDAR_RECORD\020\001\022\n\n\006APP"
  "SRC\020\002\022\013\n\007APPSINK\020\003\022\r\n\tDRIVELINE\020\004\022\023\n\017VIS"
  "UALTELEMETRY\020\005\022\014\n\010WS_VIDEO\020\006\022\r\n\tTELEMETR"
  "Y\020\007\022\024\n\020OBJECT_DETECTION\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_consts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_consts_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_consts_2eproto_once;
static bool descriptor_table_consts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_consts_2eproto = {
  &descriptor_table_consts_2eproto_initialized, descriptor_table_protodef_consts_2eproto, "consts.proto", 513,
  &descriptor_table_consts_2eproto_once, descriptor_table_consts_2eproto_sccs, descriptor_table_consts_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_consts_2eproto::offsets,
  file_level_metadata_consts_2eproto, 0, file_level_enum_descriptors_consts_2eproto, file_level_service_descriptors_consts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_consts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_consts_2eproto), true);
namespace badbot {
namespace messages {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consts_2eproto);
  return file_level_enum_descriptors_consts_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationalMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consts_2eproto);
  return file_level_enum_descriptors_consts_2eproto[1];
}
bool OperationalMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Devices_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_consts_2eproto);
  return file_level_enum_descriptors_consts_2eproto[2];
}
bool Devices_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace badbot
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
