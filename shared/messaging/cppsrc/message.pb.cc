// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_botstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BotStatus_botstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cmdvel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdVelocity_cmdvel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cmd_5foperational_5fmode_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandOperationalMode_cmd_5foperational_5fmode_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_cmdtoggle_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandToggle_cmdtoggle_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_telemetry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrivelineStatus_telemetry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_gpsdata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GpsData_gpsdata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_imudata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ImuData_imudata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_lidarscan_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LidarScan_lidarscan_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obj_5fdet_5fcoords_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ObjectDetectionCoords_obj_5fdet_5fcoords_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_videoframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoFrame_videoframe_2eproto;
namespace badbot {
namespace messages {
class BadMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BadMessage> _instance;
  const ::badbot::messages::BotStatus* status_;
  const ::badbot::messages::CommandToggle* togglecmd_;
  const ::badbot::messages::CommandOperationalMode* opmode_;
  const ::badbot::messages::CmdVelocity* cmdvel_;
  const ::badbot::messages::VideoFrame* videoframe_;
  const ::badbot::messages::ImuData* imudata_;
  const ::badbot::messages::LidarScan* lidarscan_;
  const ::badbot::messages::GpsData* gpsdata_;
  const ::badbot::messages::ObjectDetectionCoords* objcoords_;
  const ::badbot::messages::DrivelineStatus* drivelinestatus_;
} _BadMessage_default_instance_;
}  // namespace messages
}  // namespace badbot
static void InitDefaultsscc_info_BadMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::badbot::messages::_BadMessage_default_instance_;
    new (ptr) ::badbot::messages::BadMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::badbot::messages::BadMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_BadMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsscc_info_BadMessage_message_2eproto}, {
      &scc_info_BotStatus_botstatus_2eproto.base,
      &scc_info_CommandToggle_cmdtoggle_2eproto.base,
      &scc_info_CommandOperationalMode_cmd_5foperational_5fmode_2eproto.base,
      &scc_info_CmdVelocity_cmdvel_2eproto.base,
      &scc_info_VideoFrame_videoframe_2eproto.base,
      &scc_info_ImuData_imudata_2eproto.base,
      &scc_info_LidarScan_lidarscan_2eproto.base,
      &scc_info_GpsData_gpsdata_2eproto.base,
      &scc_info_ObjectDetectionCoords_obj_5fdet_5fcoords_2eproto.base,
      &scc_info_DrivelineStatus_telemetry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BadMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BadMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BadMessage, frame_id_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BadMessage, msgtype_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, status_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, togglecmd_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, opmode_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, cmdvel_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, videoframe_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, imudata_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, lidarscan_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, gpsdata_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, objcoords_),
  offsetof(::badbot::messages::BadMessageDefaultTypeInternal, drivelinestatus_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BadMessage, payload_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::badbot::messages::BadMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::badbot::messages::_BadMessage_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\017badbot.messages\032\017cmdtog"
  "gle.proto\032\017botstatus.proto\032\014consts.proto"
  "\032\032cmd_operational_mode.proto\032\014cmdvel.pro"
  "to\032\020videoframe.proto\032\rimudata.proto\032\rgps"
  "data.proto\032\017lidarscan.proto\032\024obj_det_coo"
  "rds.proto\032\017telemetry.proto\"\336\004\n\nBadMessag"
  "e\022\020\n\010frame_id\030\001 \001(\t\022-\n\007msgType\030\002 \001(\0162\034.b"
  "adbot.messages.MessageType\022,\n\006status\030\003 \001"
  "(\0132\032.badbot.messages.BotStatusH\000\0223\n\ttogg"
  "leCmd\030\004 \001(\0132\036.badbot.messages.CommandTog"
  "gleH\000\0229\n\006opMode\030\005 \001(\0132\'.badbot.messages."
  "CommandOperationalModeH\000\022.\n\006cmdVel\030\006 \001(\013"
  "2\034.badbot.messages.CmdVelocityH\000\0221\n\nvide"
  "oFrame\030\007 \001(\0132\033.badbot.messages.VideoFram"
  "eH\000\022+\n\007imuData\030\010 \001(\0132\030.badbot.messages.I"
  "muDataH\000\022/\n\tlidarScan\030\t \001(\0132\032.badbot.mes"
  "sages.LidarScanH\000\022+\n\007gpsData\030\n \001(\0132\030.bad"
  "bot.messages.GpsDataH\000\022;\n\tobjCoords\030\013 \001("
  "\0132&.badbot.messages.ObjectDetectionCoord"
  "sH\000\022;\n\017drivelineStatus\030\014 \001(\0132 .badbot.me"
  "ssages.DrivelineStatusH\000B\t\n\007payloadb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[11] = {
  &::descriptor_table_botstatus_2eproto,
  &::descriptor_table_cmd_5foperational_5fmode_2eproto,
  &::descriptor_table_cmdtoggle_2eproto,
  &::descriptor_table_cmdvel_2eproto,
  &::descriptor_table_consts_2eproto,
  &::descriptor_table_gpsdata_2eproto,
  &::descriptor_table_imudata_2eproto,
  &::descriptor_table_lidarscan_2eproto,
  &::descriptor_table_obj_5fdet_5fcoords_2eproto,
  &::descriptor_table_telemetry_2eproto,
  &::descriptor_table_videoframe_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[1] = {
  &scc_info_BadMessage_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
static bool descriptor_table_message_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  &descriptor_table_message_2eproto_initialized, descriptor_table_protodef_message_2eproto, "message.proto", 843,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 1, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto), true);
namespace badbot {
namespace messages {

// ===================================================================

void BadMessage::InitAsDefaultInstance() {
  ::badbot::messages::_BadMessage_default_instance_.status_ = const_cast< ::badbot::messages::BotStatus*>(
      ::badbot::messages::BotStatus::internal_default_instance());
  ::badbot::messages::_BadMessage_default_instance_.togglecmd_ = const_cast< ::badbot::messages::CommandToggle*>(
      ::badbot::messages::CommandToggle::internal_default_instance());
  ::badbot::messages::_BadMessage_default_instance_.opmode_ = const_cast< ::badbot::messages::CommandOperationalMode*>(
      ::badbot::messages::CommandOperationalMode::internal_default_instance());
  ::badbot::messages::_BadMessage_default_instance_.cmdvel_ = const_cast< ::badbot::messages::CmdVelocity*>(
      ::badbot::messages::CmdVelocity::internal_default_instance());
  ::badbot::messages::_BadMessage_default_instance_.videoframe_ = const_cast< ::badbot::messages::VideoFrame*>(
      ::badbot::messages::VideoFrame::internal_default_instance());
  ::badbot::messages::_BadMessage_default_instance_.imudata_ = const_cast< ::badbot::messages::ImuData*>(
      ::badbot::messages::ImuData::internal_default_instance());
  ::badbot::messages::_BadMessage_default_instance_.lidarscan_ = const_cast< ::badbot::messages::LidarScan*>(
      ::badbot::messages::LidarScan::internal_default_instance());
  ::badbot::messages::_BadMessage_default_instance_.gpsdata_ = const_cast< ::badbot::messages::GpsData*>(
      ::badbot::messages::GpsData::internal_default_instance());
  ::badbot::messages::_BadMessage_default_instance_.objcoords_ = const_cast< ::badbot::messages::ObjectDetectionCoords*>(
      ::badbot::messages::ObjectDetectionCoords::internal_default_instance());
  ::badbot::messages::_BadMessage_default_instance_.drivelinestatus_ = const_cast< ::badbot::messages::DrivelineStatus*>(
      ::badbot::messages::DrivelineStatus::internal_default_instance());
}
class BadMessage::_Internal {
 public:
  static const ::badbot::messages::BotStatus& status(const BadMessage* msg);
  static const ::badbot::messages::CommandToggle& togglecmd(const BadMessage* msg);
  static const ::badbot::messages::CommandOperationalMode& opmode(const BadMessage* msg);
  static const ::badbot::messages::CmdVelocity& cmdvel(const BadMessage* msg);
  static const ::badbot::messages::VideoFrame& videoframe(const BadMessage* msg);
  static const ::badbot::messages::ImuData& imudata(const BadMessage* msg);
  static const ::badbot::messages::LidarScan& lidarscan(const BadMessage* msg);
  static const ::badbot::messages::GpsData& gpsdata(const BadMessage* msg);
  static const ::badbot::messages::ObjectDetectionCoords& objcoords(const BadMessage* msg);
  static const ::badbot::messages::DrivelineStatus& drivelinestatus(const BadMessage* msg);
};

const ::badbot::messages::BotStatus&
BadMessage::_Internal::status(const BadMessage* msg) {
  return *msg->payload_.status_;
}
const ::badbot::messages::CommandToggle&
BadMessage::_Internal::togglecmd(const BadMessage* msg) {
  return *msg->payload_.togglecmd_;
}
const ::badbot::messages::CommandOperationalMode&
BadMessage::_Internal::opmode(const BadMessage* msg) {
  return *msg->payload_.opmode_;
}
const ::badbot::messages::CmdVelocity&
BadMessage::_Internal::cmdvel(const BadMessage* msg) {
  return *msg->payload_.cmdvel_;
}
const ::badbot::messages::VideoFrame&
BadMessage::_Internal::videoframe(const BadMessage* msg) {
  return *msg->payload_.videoframe_;
}
const ::badbot::messages::ImuData&
BadMessage::_Internal::imudata(const BadMessage* msg) {
  return *msg->payload_.imudata_;
}
const ::badbot::messages::LidarScan&
BadMessage::_Internal::lidarscan(const BadMessage* msg) {
  return *msg->payload_.lidarscan_;
}
const ::badbot::messages::GpsData&
BadMessage::_Internal::gpsdata(const BadMessage* msg) {
  return *msg->payload_.gpsdata_;
}
const ::badbot::messages::ObjectDetectionCoords&
BadMessage::_Internal::objcoords(const BadMessage* msg) {
  return *msg->payload_.objcoords_;
}
const ::badbot::messages::DrivelineStatus&
BadMessage::_Internal::drivelinestatus(const BadMessage* msg) {
  return *msg->payload_.drivelinestatus_;
}
void BadMessage::set_allocated_status(::badbot::messages::BotStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    payload_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.status)
}
void BadMessage::clear_status() {
  if (has_status()) {
    delete payload_.status_;
    clear_has_payload();
  }
}
void BadMessage::set_allocated_togglecmd(::badbot::messages::CommandToggle* togglecmd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (togglecmd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      togglecmd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, togglecmd, submessage_arena);
    }
    set_has_togglecmd();
    payload_.togglecmd_ = togglecmd;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.toggleCmd)
}
void BadMessage::clear_togglecmd() {
  if (has_togglecmd()) {
    delete payload_.togglecmd_;
    clear_has_payload();
  }
}
void BadMessage::set_allocated_opmode(::badbot::messages::CommandOperationalMode* opmode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (opmode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      opmode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, opmode, submessage_arena);
    }
    set_has_opmode();
    payload_.opmode_ = opmode;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.opMode)
}
void BadMessage::clear_opmode() {
  if (has_opmode()) {
    delete payload_.opmode_;
    clear_has_payload();
  }
}
void BadMessage::set_allocated_cmdvel(::badbot::messages::CmdVelocity* cmdvel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (cmdvel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cmdvel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmdvel, submessage_arena);
    }
    set_has_cmdvel();
    payload_.cmdvel_ = cmdvel;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.cmdVel)
}
void BadMessage::clear_cmdvel() {
  if (has_cmdvel()) {
    delete payload_.cmdvel_;
    clear_has_payload();
  }
}
void BadMessage::set_allocated_videoframe(::badbot::messages::VideoFrame* videoframe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (videoframe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      videoframe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videoframe, submessage_arena);
    }
    set_has_videoframe();
    payload_.videoframe_ = videoframe;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.videoFrame)
}
void BadMessage::clear_videoframe() {
  if (has_videoframe()) {
    delete payload_.videoframe_;
    clear_has_payload();
  }
}
void BadMessage::set_allocated_imudata(::badbot::messages::ImuData* imudata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (imudata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      imudata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imudata, submessage_arena);
    }
    set_has_imudata();
    payload_.imudata_ = imudata;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.imuData)
}
void BadMessage::clear_imudata() {
  if (has_imudata()) {
    delete payload_.imudata_;
    clear_has_payload();
  }
}
void BadMessage::set_allocated_lidarscan(::badbot::messages::LidarScan* lidarscan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (lidarscan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lidarscan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lidarscan, submessage_arena);
    }
    set_has_lidarscan();
    payload_.lidarscan_ = lidarscan;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.lidarScan)
}
void BadMessage::clear_lidarscan() {
  if (has_lidarscan()) {
    delete payload_.lidarscan_;
    clear_has_payload();
  }
}
void BadMessage::set_allocated_gpsdata(::badbot::messages::GpsData* gpsdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (gpsdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gpsdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gpsdata, submessage_arena);
    }
    set_has_gpsdata();
    payload_.gpsdata_ = gpsdata;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.gpsData)
}
void BadMessage::clear_gpsdata() {
  if (has_gpsdata()) {
    delete payload_.gpsdata_;
    clear_has_payload();
  }
}
void BadMessage::set_allocated_objcoords(::badbot::messages::ObjectDetectionCoords* objcoords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (objcoords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      objcoords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, objcoords, submessage_arena);
    }
    set_has_objcoords();
    payload_.objcoords_ = objcoords;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.objCoords)
}
void BadMessage::clear_objcoords() {
  if (has_objcoords()) {
    delete payload_.objcoords_;
    clear_has_payload();
  }
}
void BadMessage::set_allocated_drivelinestatus(::badbot::messages::DrivelineStatus* drivelinestatus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (drivelinestatus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      drivelinestatus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drivelinestatus, submessage_arena);
    }
    set_has_drivelinestatus();
    payload_.drivelinestatus_ = drivelinestatus;
  }
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.drivelineStatus)
}
void BadMessage::clear_drivelinestatus() {
  if (has_drivelinestatus()) {
    delete payload_.drivelinestatus_;
    clear_has_payload();
  }
}
BadMessage::BadMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:badbot.messages.BadMessage)
}
BadMessage::BadMessage(const BadMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.frame_id().empty()) {
    frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  msgtype_ = from.msgtype_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kStatus: {
      mutable_status()->::badbot::messages::BotStatus::MergeFrom(from.status());
      break;
    }
    case kToggleCmd: {
      mutable_togglecmd()->::badbot::messages::CommandToggle::MergeFrom(from.togglecmd());
      break;
    }
    case kOpMode: {
      mutable_opmode()->::badbot::messages::CommandOperationalMode::MergeFrom(from.opmode());
      break;
    }
    case kCmdVel: {
      mutable_cmdvel()->::badbot::messages::CmdVelocity::MergeFrom(from.cmdvel());
      break;
    }
    case kVideoFrame: {
      mutable_videoframe()->::badbot::messages::VideoFrame::MergeFrom(from.videoframe());
      break;
    }
    case kImuData: {
      mutable_imudata()->::badbot::messages::ImuData::MergeFrom(from.imudata());
      break;
    }
    case kLidarScan: {
      mutable_lidarscan()->::badbot::messages::LidarScan::MergeFrom(from.lidarscan());
      break;
    }
    case kGpsData: {
      mutable_gpsdata()->::badbot::messages::GpsData::MergeFrom(from.gpsdata());
      break;
    }
    case kObjCoords: {
      mutable_objcoords()->::badbot::messages::ObjectDetectionCoords::MergeFrom(from.objcoords());
      break;
    }
    case kDrivelineStatus: {
      mutable_drivelinestatus()->::badbot::messages::DrivelineStatus::MergeFrom(from.drivelinestatus());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:badbot.messages.BadMessage)
}

void BadMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BadMessage_message_2eproto.base);
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  clear_has_payload();
}

BadMessage::~BadMessage() {
  // @@protoc_insertion_point(destructor:badbot.messages.BadMessage)
  SharedDtor();
}

void BadMessage::SharedDtor() {
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_payload()) {
    clear_payload();
  }
}

void BadMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BadMessage& BadMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BadMessage_message_2eproto.base);
  return *internal_default_instance();
}


void BadMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:badbot.messages.BadMessage)
  switch (payload_case()) {
    case kStatus: {
      delete payload_.status_;
      break;
    }
    case kToggleCmd: {
      delete payload_.togglecmd_;
      break;
    }
    case kOpMode: {
      delete payload_.opmode_;
      break;
    }
    case kCmdVel: {
      delete payload_.cmdvel_;
      break;
    }
    case kVideoFrame: {
      delete payload_.videoframe_;
      break;
    }
    case kImuData: {
      delete payload_.imudata_;
      break;
    }
    case kLidarScan: {
      delete payload_.lidarscan_;
      break;
    }
    case kGpsData: {
      delete payload_.gpsdata_;
      break;
    }
    case kObjCoords: {
      delete payload_.objcoords_;
      break;
    }
    case kDrivelineStatus: {
      delete payload_.drivelinestatus_;
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void BadMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:badbot.messages.BadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
  clear_payload();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BadMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string frame_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_frame_id(), ptr, ctx, "badbot.messages.BadMessage.frame_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.MessageType msgType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_msgtype(static_cast<::badbot::messages::MessageType>(val));
        } else goto handle_unusual;
        continue;
      // .badbot.messages.BotStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.CommandToggle toggleCmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_togglecmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.CommandOperationalMode opMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_opmode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.CmdVelocity cmdVel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_cmdvel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.VideoFrame videoFrame = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_videoframe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.ImuData imuData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_imudata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.LidarScan lidarScan = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_lidarscan(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.GpsData gpsData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_gpsdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.ObjectDetectionCoords objCoords = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_objcoords(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.DrivelineStatus drivelineStatus = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_drivelinestatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BadMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:badbot.messages.BadMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string frame_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_frame_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->frame_id().data(), static_cast<int>(this->frame_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "badbot.messages.BadMessage.frame_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.MessageType msgType = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::badbot::messages::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.BotStatus status = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.CommandToggle toggleCmd = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_togglecmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.CommandOperationalMode opMode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_opmode()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.CmdVelocity cmdVel = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cmdvel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.VideoFrame videoFrame = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_videoframe()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.ImuData imuData = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_imudata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.LidarScan lidarScan = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lidarscan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.GpsData gpsData = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gpsdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.ObjectDetectionCoords objCoords = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_objcoords()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.DrivelineStatus drivelineStatus = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_drivelinestatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:badbot.messages.BadMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:badbot.messages.BadMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BadMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:badbot.messages.BadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string frame_id = 1;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "badbot.messages.BadMessage.frame_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->frame_id(), output);
  }

  // .badbot.messages.MessageType msgType = 2;
  if (this->msgtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  // .badbot.messages.BotStatus status = 3;
  if (has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::status(this), output);
  }

  // .badbot.messages.CommandToggle toggleCmd = 4;
  if (has_togglecmd()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::togglecmd(this), output);
  }

  // .badbot.messages.CommandOperationalMode opMode = 5;
  if (has_opmode()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::opmode(this), output);
  }

  // .badbot.messages.CmdVelocity cmdVel = 6;
  if (has_cmdvel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::cmdvel(this), output);
  }

  // .badbot.messages.VideoFrame videoFrame = 7;
  if (has_videoframe()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::videoframe(this), output);
  }

  // .badbot.messages.ImuData imuData = 8;
  if (has_imudata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::imudata(this), output);
  }

  // .badbot.messages.LidarScan lidarScan = 9;
  if (has_lidarscan()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::lidarscan(this), output);
  }

  // .badbot.messages.GpsData gpsData = 10;
  if (has_gpsdata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::gpsdata(this), output);
  }

  // .badbot.messages.ObjectDetectionCoords objCoords = 11;
  if (has_objcoords()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::objcoords(this), output);
  }

  // .badbot.messages.DrivelineStatus drivelineStatus = 12;
  if (has_drivelinestatus()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::drivelinestatus(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:badbot.messages.BadMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* BadMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:badbot.messages.BadMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string frame_id = 1;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->frame_id().data(), static_cast<int>(this->frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "badbot.messages.BadMessage.frame_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->frame_id(), target);
  }

  // .badbot.messages.MessageType msgType = 2;
  if (this->msgtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  // .badbot.messages.BotStatus status = 3;
  if (has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::status(this), target);
  }

  // .badbot.messages.CommandToggle toggleCmd = 4;
  if (has_togglecmd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::togglecmd(this), target);
  }

  // .badbot.messages.CommandOperationalMode opMode = 5;
  if (has_opmode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::opmode(this), target);
  }

  // .badbot.messages.CmdVelocity cmdVel = 6;
  if (has_cmdvel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::cmdvel(this), target);
  }

  // .badbot.messages.VideoFrame videoFrame = 7;
  if (has_videoframe()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::videoframe(this), target);
  }

  // .badbot.messages.ImuData imuData = 8;
  if (has_imudata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::imudata(this), target);
  }

  // .badbot.messages.LidarScan lidarScan = 9;
  if (has_lidarscan()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::lidarscan(this), target);
  }

  // .badbot.messages.GpsData gpsData = 10;
  if (has_gpsdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::gpsdata(this), target);
  }

  // .badbot.messages.ObjectDetectionCoords objCoords = 11;
  if (has_objcoords()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::objcoords(this), target);
  }

  // .badbot.messages.DrivelineStatus drivelineStatus = 12;
  if (has_drivelinestatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::drivelinestatus(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:badbot.messages.BadMessage)
  return target;
}

size_t BadMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:badbot.messages.BadMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_id = 1;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->frame_id());
  }

  // .badbot.messages.MessageType msgType = 2;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  switch (payload_case()) {
    // .badbot.messages.BotStatus status = 3;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.status_);
      break;
    }
    // .badbot.messages.CommandToggle toggleCmd = 4;
    case kToggleCmd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.togglecmd_);
      break;
    }
    // .badbot.messages.CommandOperationalMode opMode = 5;
    case kOpMode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.opmode_);
      break;
    }
    // .badbot.messages.CmdVelocity cmdVel = 6;
    case kCmdVel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.cmdvel_);
      break;
    }
    // .badbot.messages.VideoFrame videoFrame = 7;
    case kVideoFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.videoframe_);
      break;
    }
    // .badbot.messages.ImuData imuData = 8;
    case kImuData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.imudata_);
      break;
    }
    // .badbot.messages.LidarScan lidarScan = 9;
    case kLidarScan: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.lidarscan_);
      break;
    }
    // .badbot.messages.GpsData gpsData = 10;
    case kGpsData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.gpsdata_);
      break;
    }
    // .badbot.messages.ObjectDetectionCoords objCoords = 11;
    case kObjCoords: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.objcoords_);
      break;
    }
    // .badbot.messages.DrivelineStatus drivelineStatus = 12;
    case kDrivelineStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.drivelinestatus_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BadMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:badbot.messages.BadMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const BadMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BadMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:badbot.messages.BadMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:badbot.messages.BadMessage)
    MergeFrom(*source);
  }
}

void BadMessage::MergeFrom(const BadMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:badbot.messages.BadMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id().size() > 0) {

    frame_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_id_);
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
  switch (from.payload_case()) {
    case kStatus: {
      mutable_status()->::badbot::messages::BotStatus::MergeFrom(from.status());
      break;
    }
    case kToggleCmd: {
      mutable_togglecmd()->::badbot::messages::CommandToggle::MergeFrom(from.togglecmd());
      break;
    }
    case kOpMode: {
      mutable_opmode()->::badbot::messages::CommandOperationalMode::MergeFrom(from.opmode());
      break;
    }
    case kCmdVel: {
      mutable_cmdvel()->::badbot::messages::CmdVelocity::MergeFrom(from.cmdvel());
      break;
    }
    case kVideoFrame: {
      mutable_videoframe()->::badbot::messages::VideoFrame::MergeFrom(from.videoframe());
      break;
    }
    case kImuData: {
      mutable_imudata()->::badbot::messages::ImuData::MergeFrom(from.imudata());
      break;
    }
    case kLidarScan: {
      mutable_lidarscan()->::badbot::messages::LidarScan::MergeFrom(from.lidarscan());
      break;
    }
    case kGpsData: {
      mutable_gpsdata()->::badbot::messages::GpsData::MergeFrom(from.gpsdata());
      break;
    }
    case kObjCoords: {
      mutable_objcoords()->::badbot::messages::ObjectDetectionCoords::MergeFrom(from.objcoords());
      break;
    }
    case kDrivelineStatus: {
      mutable_drivelinestatus()->::badbot::messages::DrivelineStatus::MergeFrom(from.drivelinestatus());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void BadMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:badbot.messages.BadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BadMessage::CopyFrom(const BadMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:badbot.messages.BadMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BadMessage::IsInitialized() const {
  return true;
}

void BadMessage::InternalSwap(BadMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgtype_, other->msgtype_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BadMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace badbot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::badbot::messages::BadMessage* Arena::CreateMaybeMessage< ::badbot::messages::BadMessage >(Arena* arena) {
  return Arena::CreateInternal< ::badbot::messages::BadMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
