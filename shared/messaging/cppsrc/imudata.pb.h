// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: imudata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_imudata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_imudata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_imudata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_imudata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_imudata_2eproto;
namespace badbot {
namespace messages {
class ImuData;
class ImuDataDefaultTypeInternal;
extern ImuDataDefaultTypeInternal _ImuData_default_instance_;
class Tuple;
class TupleDefaultTypeInternal;
extern TupleDefaultTypeInternal _Tuple_default_instance_;
}  // namespace messages
}  // namespace badbot
PROTOBUF_NAMESPACE_OPEN
template<> ::badbot::messages::ImuData* Arena::CreateMaybeMessage<::badbot::messages::ImuData>(Arena*);
template<> ::badbot::messages::Tuple* Arena::CreateMaybeMessage<::badbot::messages::Tuple>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace badbot {
namespace messages {

// ===================================================================

class Tuple :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:badbot.messages.Tuple) */ {
 public:
  Tuple();
  virtual ~Tuple();

  Tuple(const Tuple& from);
  Tuple(Tuple&& from) noexcept
    : Tuple() {
    *this = ::std::move(from);
  }

  inline Tuple& operator=(const Tuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tuple& operator=(Tuple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tuple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tuple* internal_default_instance() {
    return reinterpret_cast<const Tuple*>(
               &_Tuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Tuple& a, Tuple& b) {
    a.Swap(&b);
  }
  inline void Swap(Tuple* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tuple* New() const final {
    return CreateMaybeMessage<Tuple>(nullptr);
  }

  Tuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tuple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tuple& from);
  void MergeFrom(const Tuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tuple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "badbot.messages.Tuple";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imudata_2eproto);
    return ::descriptor_table_imudata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:badbot.messages.Tuple)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_imudata_2eproto;
};
// -------------------------------------------------------------------

class ImuData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:badbot.messages.ImuData) */ {
 public:
  ImuData();
  virtual ~ImuData();

  ImuData(const ImuData& from);
  ImuData(ImuData&& from) noexcept
    : ImuData() {
    *this = ::std::move(from);
  }

  inline ImuData& operator=(const ImuData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuData& operator=(ImuData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ImuData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImuData* internal_default_instance() {
    return reinterpret_cast<const ImuData*>(
               &_ImuData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImuData& a, ImuData& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ImuData* New() const final {
    return CreateMaybeMessage<ImuData>(nullptr);
  }

  ImuData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ImuData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ImuData& from);
  void MergeFrom(const ImuData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "badbot.messages.ImuData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_imudata_2eproto);
    return ::descriptor_table_imudata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kTemperatureFieldNumber = 3,
    kPressureFieldNumber = 4,
    kAltitudeFieldNumber = 5,
  };
  // .badbot.messages.Tuple acceleration = 1;
  bool has_acceleration() const;
  void clear_acceleration();
  const ::badbot::messages::Tuple& acceleration() const;
  ::badbot::messages::Tuple* release_acceleration();
  ::badbot::messages::Tuple* mutable_acceleration();
  void set_allocated_acceleration(::badbot::messages::Tuple* acceleration);

  // .badbot.messages.Tuple orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  const ::badbot::messages::Tuple& orientation() const;
  ::badbot::messages::Tuple* release_orientation();
  ::badbot::messages::Tuple* mutable_orientation();
  void set_allocated_orientation(::badbot::messages::Tuple* orientation);

  // float temperature = 3;
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);

  // float pressure = 4;
  void clear_pressure();
  float pressure() const;
  void set_pressure(float value);

  // float altitude = 5;
  void clear_altitude();
  float altitude() const;
  void set_altitude(float value);

  // @@protoc_insertion_point(class_scope:badbot.messages.ImuData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::badbot::messages::Tuple* acceleration_;
  ::badbot::messages::Tuple* orientation_;
  float temperature_;
  float pressure_;
  float altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_imudata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Tuple

// float x = 1;
inline void Tuple::clear_x() {
  x_ = 0;
}
inline float Tuple::x() const {
  // @@protoc_insertion_point(field_get:badbot.messages.Tuple.x)
  return x_;
}
inline void Tuple::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.Tuple.x)
}

// float y = 2;
inline void Tuple::clear_y() {
  y_ = 0;
}
inline float Tuple::y() const {
  // @@protoc_insertion_point(field_get:badbot.messages.Tuple.y)
  return y_;
}
inline void Tuple::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.Tuple.y)
}

// float z = 3;
inline void Tuple::clear_z() {
  z_ = 0;
}
inline float Tuple::z() const {
  // @@protoc_insertion_point(field_get:badbot.messages.Tuple.z)
  return z_;
}
inline void Tuple::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.Tuple.z)
}

// -------------------------------------------------------------------

// ImuData

// .badbot.messages.Tuple acceleration = 1;
inline bool ImuData::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline void ImuData::clear_acceleration() {
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
inline const ::badbot::messages::Tuple& ImuData::acceleration() const {
  const ::badbot::messages::Tuple* p = acceleration_;
  // @@protoc_insertion_point(field_get:badbot.messages.ImuData.acceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::badbot::messages::Tuple*>(
      &::badbot::messages::_Tuple_default_instance_);
}
inline ::badbot::messages::Tuple* ImuData::release_acceleration() {
  // @@protoc_insertion_point(field_release:badbot.messages.ImuData.acceleration)
  
  ::badbot::messages::Tuple* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::badbot::messages::Tuple* ImuData::mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::badbot::messages::Tuple>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.ImuData.acceleration)
  return acceleration_;
}
inline void ImuData::set_allocated_acceleration(::badbot::messages::Tuple* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.ImuData.acceleration)
}

// .badbot.messages.Tuple orientation = 2;
inline bool ImuData::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void ImuData::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::badbot::messages::Tuple& ImuData::orientation() const {
  const ::badbot::messages::Tuple* p = orientation_;
  // @@protoc_insertion_point(field_get:badbot.messages.ImuData.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::badbot::messages::Tuple*>(
      &::badbot::messages::_Tuple_default_instance_);
}
inline ::badbot::messages::Tuple* ImuData::release_orientation() {
  // @@protoc_insertion_point(field_release:badbot.messages.ImuData.orientation)
  
  ::badbot::messages::Tuple* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::badbot::messages::Tuple* ImuData::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::badbot::messages::Tuple>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.ImuData.orientation)
  return orientation_;
}
inline void ImuData::set_allocated_orientation(::badbot::messages::Tuple* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.ImuData.orientation)
}

// float temperature = 3;
inline void ImuData::clear_temperature() {
  temperature_ = 0;
}
inline float ImuData::temperature() const {
  // @@protoc_insertion_point(field_get:badbot.messages.ImuData.temperature)
  return temperature_;
}
inline void ImuData::set_temperature(float value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.ImuData.temperature)
}

// float pressure = 4;
inline void ImuData::clear_pressure() {
  pressure_ = 0;
}
inline float ImuData::pressure() const {
  // @@protoc_insertion_point(field_get:badbot.messages.ImuData.pressure)
  return pressure_;
}
inline void ImuData::set_pressure(float value) {
  
  pressure_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.ImuData.pressure)
}

// float altitude = 5;
inline void ImuData::clear_altitude() {
  altitude_ = 0;
}
inline float ImuData::altitude() const {
  // @@protoc_insertion_point(field_get:badbot.messages.ImuData.altitude)
  return altitude_;
}
inline void ImuData::set_altitude(float value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.ImuData.altitude)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace badbot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_imudata_2eproto
