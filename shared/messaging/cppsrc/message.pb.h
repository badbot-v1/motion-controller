// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "cmdtoggle.pb.h"
#include "botstatus.pb.h"
#include "consts.pb.h"
#include "cmd_operational_mode.pb.h"
#include "cmdvel.pb.h"
#include "videoframe.pb.h"
#include "imudata.pb.h"
#include "gpsdata.pb.h"
#include "lidarscan.pb.h"
#include "obj_det_coords.pb.h"
#include "telemetry.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace badbot {
namespace messages {
class BadMessage;
class BadMessageDefaultTypeInternal;
extern BadMessageDefaultTypeInternal _BadMessage_default_instance_;
}  // namespace messages
}  // namespace badbot
PROTOBUF_NAMESPACE_OPEN
template<> ::badbot::messages::BadMessage* Arena::CreateMaybeMessage<::badbot::messages::BadMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace badbot {
namespace messages {

// ===================================================================

class BadMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:badbot.messages.BadMessage) */ {
 public:
  BadMessage();
  virtual ~BadMessage();

  BadMessage(const BadMessage& from);
  BadMessage(BadMessage&& from) noexcept
    : BadMessage() {
    *this = ::std::move(from);
  }

  inline BadMessage& operator=(const BadMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BadMessage& operator=(BadMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BadMessage& default_instance();

  enum PayloadCase {
    kStatus = 3,
    kToggleCmd = 4,
    kOpMode = 5,
    kCmdVel = 6,
    kVideoFrame = 7,
    kImuData = 8,
    kLidarScan = 9,
    kGpsData = 10,
    kObjCoords = 11,
    kDrivelineStatus = 12,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BadMessage* internal_default_instance() {
    return reinterpret_cast<const BadMessage*>(
               &_BadMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BadMessage& a, BadMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BadMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BadMessage* New() const final {
    return CreateMaybeMessage<BadMessage>(nullptr);
  }

  BadMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BadMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BadMessage& from);
  void MergeFrom(const BadMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BadMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "badbot.messages.BadMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
    kStatusFieldNumber = 3,
    kToggleCmdFieldNumber = 4,
    kOpModeFieldNumber = 5,
    kCmdVelFieldNumber = 6,
    kVideoFrameFieldNumber = 7,
    kImuDataFieldNumber = 8,
    kLidarScanFieldNumber = 9,
    kGpsDataFieldNumber = 10,
    kObjCoordsFieldNumber = 11,
    kDrivelineStatusFieldNumber = 12,
  };
  // string frame_id = 1;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);

  // .badbot.messages.MessageType msgType = 2;
  void clear_msgtype();
  ::badbot::messages::MessageType msgtype() const;
  void set_msgtype(::badbot::messages::MessageType value);

  // .badbot.messages.BotStatus status = 3;
  bool has_status() const;
  void clear_status();
  const ::badbot::messages::BotStatus& status() const;
  ::badbot::messages::BotStatus* release_status();
  ::badbot::messages::BotStatus* mutable_status();
  void set_allocated_status(::badbot::messages::BotStatus* status);

  // .badbot.messages.CommandToggle toggleCmd = 4;
  bool has_togglecmd() const;
  void clear_togglecmd();
  const ::badbot::messages::CommandToggle& togglecmd() const;
  ::badbot::messages::CommandToggle* release_togglecmd();
  ::badbot::messages::CommandToggle* mutable_togglecmd();
  void set_allocated_togglecmd(::badbot::messages::CommandToggle* togglecmd);

  // .badbot.messages.CommandOperationalMode opMode = 5;
  bool has_opmode() const;
  void clear_opmode();
  const ::badbot::messages::CommandOperationalMode& opmode() const;
  ::badbot::messages::CommandOperationalMode* release_opmode();
  ::badbot::messages::CommandOperationalMode* mutable_opmode();
  void set_allocated_opmode(::badbot::messages::CommandOperationalMode* opmode);

  // .badbot.messages.CmdVelocity cmdVel = 6;
  bool has_cmdvel() const;
  void clear_cmdvel();
  const ::badbot::messages::CmdVelocity& cmdvel() const;
  ::badbot::messages::CmdVelocity* release_cmdvel();
  ::badbot::messages::CmdVelocity* mutable_cmdvel();
  void set_allocated_cmdvel(::badbot::messages::CmdVelocity* cmdvel);

  // .badbot.messages.VideoFrame videoFrame = 7;
  bool has_videoframe() const;
  void clear_videoframe();
  const ::badbot::messages::VideoFrame& videoframe() const;
  ::badbot::messages::VideoFrame* release_videoframe();
  ::badbot::messages::VideoFrame* mutable_videoframe();
  void set_allocated_videoframe(::badbot::messages::VideoFrame* videoframe);

  // .badbot.messages.ImuData imuData = 8;
  bool has_imudata() const;
  void clear_imudata();
  const ::badbot::messages::ImuData& imudata() const;
  ::badbot::messages::ImuData* release_imudata();
  ::badbot::messages::ImuData* mutable_imudata();
  void set_allocated_imudata(::badbot::messages::ImuData* imudata);

  // .badbot.messages.LidarScan lidarScan = 9;
  bool has_lidarscan() const;
  void clear_lidarscan();
  const ::badbot::messages::LidarScan& lidarscan() const;
  ::badbot::messages::LidarScan* release_lidarscan();
  ::badbot::messages::LidarScan* mutable_lidarscan();
  void set_allocated_lidarscan(::badbot::messages::LidarScan* lidarscan);

  // .badbot.messages.GpsData gpsData = 10;
  bool has_gpsdata() const;
  void clear_gpsdata();
  const ::badbot::messages::GpsData& gpsdata() const;
  ::badbot::messages::GpsData* release_gpsdata();
  ::badbot::messages::GpsData* mutable_gpsdata();
  void set_allocated_gpsdata(::badbot::messages::GpsData* gpsdata);

  // .badbot.messages.ObjectDetectionCoords objCoords = 11;
  bool has_objcoords() const;
  void clear_objcoords();
  const ::badbot::messages::ObjectDetectionCoords& objcoords() const;
  ::badbot::messages::ObjectDetectionCoords* release_objcoords();
  ::badbot::messages::ObjectDetectionCoords* mutable_objcoords();
  void set_allocated_objcoords(::badbot::messages::ObjectDetectionCoords* objcoords);

  // .badbot.messages.DrivelineStatus drivelineStatus = 12;
  bool has_drivelinestatus() const;
  void clear_drivelinestatus();
  const ::badbot::messages::DrivelineStatus& drivelinestatus() const;
  ::badbot::messages::DrivelineStatus* release_drivelinestatus();
  ::badbot::messages::DrivelineStatus* mutable_drivelinestatus();
  void set_allocated_drivelinestatus(::badbot::messages::DrivelineStatus* drivelinestatus);

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:badbot.messages.BadMessage)
 private:
  class _Internal;
  void set_has_status();
  void set_has_togglecmd();
  void set_has_opmode();
  void set_has_cmdvel();
  void set_has_videoframe();
  void set_has_imudata();
  void set_has_lidarscan();
  void set_has_gpsdata();
  void set_has_objcoords();
  void set_has_drivelinestatus();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  int msgtype_;
  union PayloadUnion {
    PayloadUnion() {}
    ::badbot::messages::BotStatus* status_;
    ::badbot::messages::CommandToggle* togglecmd_;
    ::badbot::messages::CommandOperationalMode* opmode_;
    ::badbot::messages::CmdVelocity* cmdvel_;
    ::badbot::messages::VideoFrame* videoframe_;
    ::badbot::messages::ImuData* imudata_;
    ::badbot::messages::LidarScan* lidarscan_;
    ::badbot::messages::GpsData* gpsdata_;
    ::badbot::messages::ObjectDetectionCoords* objcoords_;
    ::badbot::messages::DrivelineStatus* drivelinestatus_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BadMessage

// string frame_id = 1;
inline void BadMessage::clear_frame_id() {
  frame_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BadMessage::frame_id() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.frame_id)
  return frame_id_.GetNoArena();
}
inline void BadMessage::set_frame_id(const std::string& value) {
  
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:badbot.messages.BadMessage.frame_id)
}
inline void BadMessage::set_frame_id(std::string&& value) {
  
  frame_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:badbot.messages.BadMessage.frame_id)
}
inline void BadMessage::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:badbot.messages.BadMessage.frame_id)
}
inline void BadMessage::set_frame_id(const char* value, size_t size) {
  
  frame_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:badbot.messages.BadMessage.frame_id)
}
inline std::string* BadMessage::mutable_frame_id() {
  
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.frame_id)
  return frame_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BadMessage::release_frame_id() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.frame_id)
  
  return frame_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BadMessage::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id);
  // @@protoc_insertion_point(field_set_allocated:badbot.messages.BadMessage.frame_id)
}

// .badbot.messages.MessageType msgType = 2;
inline void BadMessage::clear_msgtype() {
  msgtype_ = 0;
}
inline ::badbot::messages::MessageType BadMessage::msgtype() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.msgType)
  return static_cast< ::badbot::messages::MessageType >(msgtype_);
}
inline void BadMessage::set_msgtype(::badbot::messages::MessageType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.BadMessage.msgType)
}

// .badbot.messages.BotStatus status = 3;
inline bool BadMessage::has_status() const {
  return payload_case() == kStatus;
}
inline void BadMessage::set_has_status() {
  _oneof_case_[0] = kStatus;
}
inline ::badbot::messages::BotStatus* BadMessage::release_status() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.status)
  if (has_status()) {
    clear_has_payload();
      ::badbot::messages::BotStatus* temp = payload_.status_;
    payload_.status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::BotStatus& BadMessage::status() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.status)
  return has_status()
      ? *payload_.status_
      : *reinterpret_cast< ::badbot::messages::BotStatus*>(&::badbot::messages::_BotStatus_default_instance_);
}
inline ::badbot::messages::BotStatus* BadMessage::mutable_status() {
  if (!has_status()) {
    clear_payload();
    set_has_status();
    payload_.status_ = CreateMaybeMessage< ::badbot::messages::BotStatus >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.status)
  return payload_.status_;
}

// .badbot.messages.CommandToggle toggleCmd = 4;
inline bool BadMessage::has_togglecmd() const {
  return payload_case() == kToggleCmd;
}
inline void BadMessage::set_has_togglecmd() {
  _oneof_case_[0] = kToggleCmd;
}
inline ::badbot::messages::CommandToggle* BadMessage::release_togglecmd() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.toggleCmd)
  if (has_togglecmd()) {
    clear_has_payload();
      ::badbot::messages::CommandToggle* temp = payload_.togglecmd_;
    payload_.togglecmd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::CommandToggle& BadMessage::togglecmd() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.toggleCmd)
  return has_togglecmd()
      ? *payload_.togglecmd_
      : *reinterpret_cast< ::badbot::messages::CommandToggle*>(&::badbot::messages::_CommandToggle_default_instance_);
}
inline ::badbot::messages::CommandToggle* BadMessage::mutable_togglecmd() {
  if (!has_togglecmd()) {
    clear_payload();
    set_has_togglecmd();
    payload_.togglecmd_ = CreateMaybeMessage< ::badbot::messages::CommandToggle >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.toggleCmd)
  return payload_.togglecmd_;
}

// .badbot.messages.CommandOperationalMode opMode = 5;
inline bool BadMessage::has_opmode() const {
  return payload_case() == kOpMode;
}
inline void BadMessage::set_has_opmode() {
  _oneof_case_[0] = kOpMode;
}
inline ::badbot::messages::CommandOperationalMode* BadMessage::release_opmode() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.opMode)
  if (has_opmode()) {
    clear_has_payload();
      ::badbot::messages::CommandOperationalMode* temp = payload_.opmode_;
    payload_.opmode_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::CommandOperationalMode& BadMessage::opmode() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.opMode)
  return has_opmode()
      ? *payload_.opmode_
      : *reinterpret_cast< ::badbot::messages::CommandOperationalMode*>(&::badbot::messages::_CommandOperationalMode_default_instance_);
}
inline ::badbot::messages::CommandOperationalMode* BadMessage::mutable_opmode() {
  if (!has_opmode()) {
    clear_payload();
    set_has_opmode();
    payload_.opmode_ = CreateMaybeMessage< ::badbot::messages::CommandOperationalMode >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.opMode)
  return payload_.opmode_;
}

// .badbot.messages.CmdVelocity cmdVel = 6;
inline bool BadMessage::has_cmdvel() const {
  return payload_case() == kCmdVel;
}
inline void BadMessage::set_has_cmdvel() {
  _oneof_case_[0] = kCmdVel;
}
inline ::badbot::messages::CmdVelocity* BadMessage::release_cmdvel() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.cmdVel)
  if (has_cmdvel()) {
    clear_has_payload();
      ::badbot::messages::CmdVelocity* temp = payload_.cmdvel_;
    payload_.cmdvel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::CmdVelocity& BadMessage::cmdvel() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.cmdVel)
  return has_cmdvel()
      ? *payload_.cmdvel_
      : *reinterpret_cast< ::badbot::messages::CmdVelocity*>(&::badbot::messages::_CmdVelocity_default_instance_);
}
inline ::badbot::messages::CmdVelocity* BadMessage::mutable_cmdvel() {
  if (!has_cmdvel()) {
    clear_payload();
    set_has_cmdvel();
    payload_.cmdvel_ = CreateMaybeMessage< ::badbot::messages::CmdVelocity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.cmdVel)
  return payload_.cmdvel_;
}

// .badbot.messages.VideoFrame videoFrame = 7;
inline bool BadMessage::has_videoframe() const {
  return payload_case() == kVideoFrame;
}
inline void BadMessage::set_has_videoframe() {
  _oneof_case_[0] = kVideoFrame;
}
inline ::badbot::messages::VideoFrame* BadMessage::release_videoframe() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.videoFrame)
  if (has_videoframe()) {
    clear_has_payload();
      ::badbot::messages::VideoFrame* temp = payload_.videoframe_;
    payload_.videoframe_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::VideoFrame& BadMessage::videoframe() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.videoFrame)
  return has_videoframe()
      ? *payload_.videoframe_
      : *reinterpret_cast< ::badbot::messages::VideoFrame*>(&::badbot::messages::_VideoFrame_default_instance_);
}
inline ::badbot::messages::VideoFrame* BadMessage::mutable_videoframe() {
  if (!has_videoframe()) {
    clear_payload();
    set_has_videoframe();
    payload_.videoframe_ = CreateMaybeMessage< ::badbot::messages::VideoFrame >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.videoFrame)
  return payload_.videoframe_;
}

// .badbot.messages.ImuData imuData = 8;
inline bool BadMessage::has_imudata() const {
  return payload_case() == kImuData;
}
inline void BadMessage::set_has_imudata() {
  _oneof_case_[0] = kImuData;
}
inline ::badbot::messages::ImuData* BadMessage::release_imudata() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.imuData)
  if (has_imudata()) {
    clear_has_payload();
      ::badbot::messages::ImuData* temp = payload_.imudata_;
    payload_.imudata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::ImuData& BadMessage::imudata() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.imuData)
  return has_imudata()
      ? *payload_.imudata_
      : *reinterpret_cast< ::badbot::messages::ImuData*>(&::badbot::messages::_ImuData_default_instance_);
}
inline ::badbot::messages::ImuData* BadMessage::mutable_imudata() {
  if (!has_imudata()) {
    clear_payload();
    set_has_imudata();
    payload_.imudata_ = CreateMaybeMessage< ::badbot::messages::ImuData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.imuData)
  return payload_.imudata_;
}

// .badbot.messages.LidarScan lidarScan = 9;
inline bool BadMessage::has_lidarscan() const {
  return payload_case() == kLidarScan;
}
inline void BadMessage::set_has_lidarscan() {
  _oneof_case_[0] = kLidarScan;
}
inline ::badbot::messages::LidarScan* BadMessage::release_lidarscan() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.lidarScan)
  if (has_lidarscan()) {
    clear_has_payload();
      ::badbot::messages::LidarScan* temp = payload_.lidarscan_;
    payload_.lidarscan_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::LidarScan& BadMessage::lidarscan() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.lidarScan)
  return has_lidarscan()
      ? *payload_.lidarscan_
      : *reinterpret_cast< ::badbot::messages::LidarScan*>(&::badbot::messages::_LidarScan_default_instance_);
}
inline ::badbot::messages::LidarScan* BadMessage::mutable_lidarscan() {
  if (!has_lidarscan()) {
    clear_payload();
    set_has_lidarscan();
    payload_.lidarscan_ = CreateMaybeMessage< ::badbot::messages::LidarScan >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.lidarScan)
  return payload_.lidarscan_;
}

// .badbot.messages.GpsData gpsData = 10;
inline bool BadMessage::has_gpsdata() const {
  return payload_case() == kGpsData;
}
inline void BadMessage::set_has_gpsdata() {
  _oneof_case_[0] = kGpsData;
}
inline ::badbot::messages::GpsData* BadMessage::release_gpsdata() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.gpsData)
  if (has_gpsdata()) {
    clear_has_payload();
      ::badbot::messages::GpsData* temp = payload_.gpsdata_;
    payload_.gpsdata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::GpsData& BadMessage::gpsdata() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.gpsData)
  return has_gpsdata()
      ? *payload_.gpsdata_
      : *reinterpret_cast< ::badbot::messages::GpsData*>(&::badbot::messages::_GpsData_default_instance_);
}
inline ::badbot::messages::GpsData* BadMessage::mutable_gpsdata() {
  if (!has_gpsdata()) {
    clear_payload();
    set_has_gpsdata();
    payload_.gpsdata_ = CreateMaybeMessage< ::badbot::messages::GpsData >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.gpsData)
  return payload_.gpsdata_;
}

// .badbot.messages.ObjectDetectionCoords objCoords = 11;
inline bool BadMessage::has_objcoords() const {
  return payload_case() == kObjCoords;
}
inline void BadMessage::set_has_objcoords() {
  _oneof_case_[0] = kObjCoords;
}
inline ::badbot::messages::ObjectDetectionCoords* BadMessage::release_objcoords() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.objCoords)
  if (has_objcoords()) {
    clear_has_payload();
      ::badbot::messages::ObjectDetectionCoords* temp = payload_.objcoords_;
    payload_.objcoords_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::ObjectDetectionCoords& BadMessage::objcoords() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.objCoords)
  return has_objcoords()
      ? *payload_.objcoords_
      : *reinterpret_cast< ::badbot::messages::ObjectDetectionCoords*>(&::badbot::messages::_ObjectDetectionCoords_default_instance_);
}
inline ::badbot::messages::ObjectDetectionCoords* BadMessage::mutable_objcoords() {
  if (!has_objcoords()) {
    clear_payload();
    set_has_objcoords();
    payload_.objcoords_ = CreateMaybeMessage< ::badbot::messages::ObjectDetectionCoords >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.objCoords)
  return payload_.objcoords_;
}

// .badbot.messages.DrivelineStatus drivelineStatus = 12;
inline bool BadMessage::has_drivelinestatus() const {
  return payload_case() == kDrivelineStatus;
}
inline void BadMessage::set_has_drivelinestatus() {
  _oneof_case_[0] = kDrivelineStatus;
}
inline ::badbot::messages::DrivelineStatus* BadMessage::release_drivelinestatus() {
  // @@protoc_insertion_point(field_release:badbot.messages.BadMessage.drivelineStatus)
  if (has_drivelinestatus()) {
    clear_has_payload();
      ::badbot::messages::DrivelineStatus* temp = payload_.drivelinestatus_;
    payload_.drivelinestatus_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::badbot::messages::DrivelineStatus& BadMessage::drivelinestatus() const {
  // @@protoc_insertion_point(field_get:badbot.messages.BadMessage.drivelineStatus)
  return has_drivelinestatus()
      ? *payload_.drivelinestatus_
      : *reinterpret_cast< ::badbot::messages::DrivelineStatus*>(&::badbot::messages::_DrivelineStatus_default_instance_);
}
inline ::badbot::messages::DrivelineStatus* BadMessage::mutable_drivelinestatus() {
  if (!has_drivelinestatus()) {
    clear_payload();
    set_has_drivelinestatus();
    payload_.drivelinestatus_ = CreateMaybeMessage< ::badbot::messages::DrivelineStatus >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:badbot.messages.BadMessage.drivelineStatus)
  return payload_.drivelinestatus_;
}

inline bool BadMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void BadMessage::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline BadMessage::PayloadCase BadMessage::payload_case() const {
  return BadMessage::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace badbot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
