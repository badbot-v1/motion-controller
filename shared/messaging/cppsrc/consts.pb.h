// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: consts.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_consts_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_consts_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_consts_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_consts_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_consts_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace badbot {
namespace messages {

enum MessageType : int {
  STATUS_BOT = 0,
  CMD_TOGGLE = 1,
  CMD_OPERATIONAL_MODE = 2,
  CMD_TELEOP_MOVEMENT = 3,
  HEARTBEAT_RC = 4,
  VIDEO_FRAME = 5,
  TELE_IMU = 6,
  TELE_LIDAR = 7,
  TELE_GPS = 8,
  VPM_OBJ_DET_COORDS = 9,
  TELE_DRIVELINE_STATUS = 10,
  TELE_LIDAR_POI = 11,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = STATUS_BOT;
constexpr MessageType MessageType_MAX = TELE_LIDAR_POI;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum OperationalMode : int {
  TELEOP = 0,
  FOLLOW_ME = 1,
  AUTONOMOUS = 2,
  IDLE = 4,
  OperationalMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OperationalMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OperationalMode_IsValid(int value);
constexpr OperationalMode OperationalMode_MIN = TELEOP;
constexpr OperationalMode OperationalMode_MAX = IDLE;
constexpr int OperationalMode_ARRAYSIZE = OperationalMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OperationalMode_descriptor();
template<typename T>
inline const std::string& OperationalMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OperationalMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OperationalMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OperationalMode_descriptor(), enum_t_value);
}
inline bool OperationalMode_Parse(
    const std::string& name, OperationalMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OperationalMode>(
    OperationalMode_descriptor(), name, value);
}
enum Devices : int {
  LIDAR = 0,
  LIDAR_RECORD = 1,
  APPSRC = 2,
  APPSINK = 3,
  DRIVELINE = 4,
  VISUALTELEMETRY = 5,
  WS_VIDEO = 6,
  TELEMETRY = 7,
  OBJECT_DETECTION = 8,
  Devices_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Devices_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Devices_IsValid(int value);
constexpr Devices Devices_MIN = LIDAR;
constexpr Devices Devices_MAX = OBJECT_DETECTION;
constexpr int Devices_ARRAYSIZE = Devices_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Devices_descriptor();
template<typename T>
inline const std::string& Devices_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Devices>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Devices_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Devices_descriptor(), enum_t_value);
}
inline bool Devices_Parse(
    const std::string& name, Devices* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Devices>(
    Devices_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace badbot

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::badbot::messages::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::badbot::messages::MessageType>() {
  return ::badbot::messages::MessageType_descriptor();
}
template <> struct is_proto_enum< ::badbot::messages::OperationalMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::badbot::messages::OperationalMode>() {
  return ::badbot::messages::OperationalMode_descriptor();
}
template <> struct is_proto_enum< ::badbot::messages::Devices> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::badbot::messages::Devices>() {
  return ::badbot::messages::Devices_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_consts_2eproto
