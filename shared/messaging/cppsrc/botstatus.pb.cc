// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: botstatus.proto

#include "botstatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_botstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemLoadAvg_botstatus_2eproto;
namespace badbot {
namespace messages {
class SystemLoadAvgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemLoadAvg> _instance;
} _SystemLoadAvg_default_instance_;
class BotStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BotStatus> _instance;
} _BotStatus_default_instance_;
}  // namespace messages
}  // namespace badbot
static void InitDefaultsscc_info_BotStatus_botstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::badbot::messages::_BotStatus_default_instance_;
    new (ptr) ::badbot::messages::BotStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::badbot::messages::BotStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BotStatus_botstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BotStatus_botstatus_2eproto}, {
      &scc_info_SystemLoadAvg_botstatus_2eproto.base,}};

static void InitDefaultsscc_info_SystemLoadAvg_botstatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::badbot::messages::_SystemLoadAvg_default_instance_;
    new (ptr) ::badbot::messages::SystemLoadAvg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::badbot::messages::SystemLoadAvg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemLoadAvg_botstatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SystemLoadAvg_botstatus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_botstatus_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_botstatus_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_botstatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_botstatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::badbot::messages::SystemLoadAvg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::badbot::messages::SystemLoadAvg, onemin_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::SystemLoadAvg, fivemin_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::SystemLoadAvg, fifteenmin_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::SystemLoadAvg, numcores_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::SystemLoadAvg, totalram_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::SystemLoadAvg, freeram_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::SystemLoadAvg, totalswap_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::SystemLoadAvg, freeswap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, lidarenabled_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, lidarrecordingenabled_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, mode_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, appsrcenabled_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, wsvideoenabled_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, telemetryenabled_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, imuhealthy_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, sysloadavg_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, gpshealthy_),
  PROTOBUF_FIELD_OFFSET(::badbot::messages::BotStatus, motorcontrollerhealthy_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::badbot::messages::SystemLoadAvg)},
  { 13, -1, sizeof(::badbot::messages::BotStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::badbot::messages::_SystemLoadAvg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::badbot::messages::_BotStatus_default_instance_),
};

const char descriptor_table_protodef_botstatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017botstatus.proto\022\017badbot.messages\032\014cons"
  "ts.proto\"\236\001\n\rSystemLoadAvg\022\016\n\006oneMin\030\001 \001"
  "(\002\022\017\n\007fiveMin\030\002 \001(\002\022\022\n\nfifteenMin\030\003 \001(\002\022"
  "\020\n\010numCores\030\004 \001(\005\022\020\n\010totalRam\030\005 \001(\r\022\017\n\007f"
  "reeRam\030\006 \001(\r\022\021\n\ttotalSwap\030\007 \001(\r\022\020\n\010freeS"
  "wap\030\010 \001(\r\"\265\002\n\tBotStatus\022\024\n\014lidarEnabled\030"
  "\001 \001(\010\022\035\n\025lidarRecordingEnabled\030\002 \001(\010\022.\n\004"
  "mode\030\003 \001(\0162 .badbot.messages.Operational"
  "Mode\022\025\n\rappSrcEnabled\030\004 \001(\010\022\026\n\016wsVideoEn"
  "abled\030\005 \001(\010\022\030\n\020telemetryEnabled\030\006 \001(\010\022\022\n"
  "\nimuHealthy\030\007 \001(\010\0222\n\nsysLoadAvg\030\010 \001(\0132\036."
  "badbot.messages.SystemLoadAvg\022\022\n\ngpsHeal"
  "thy\030\t \001(\010\022\036\n\026motorControllerHealthy\030\n \001("
  "\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_botstatus_2eproto_deps[1] = {
  &::descriptor_table_consts_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_botstatus_2eproto_sccs[2] = {
  &scc_info_BotStatus_botstatus_2eproto.base,
  &scc_info_SystemLoadAvg_botstatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_botstatus_2eproto_once;
static bool descriptor_table_botstatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_botstatus_2eproto = {
  &descriptor_table_botstatus_2eproto_initialized, descriptor_table_protodef_botstatus_2eproto, "botstatus.proto", 529,
  &descriptor_table_botstatus_2eproto_once, descriptor_table_botstatus_2eproto_sccs, descriptor_table_botstatus_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_botstatus_2eproto::offsets,
  file_level_metadata_botstatus_2eproto, 2, file_level_enum_descriptors_botstatus_2eproto, file_level_service_descriptors_botstatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_botstatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_botstatus_2eproto), true);
namespace badbot {
namespace messages {

// ===================================================================

void SystemLoadAvg::InitAsDefaultInstance() {
}
class SystemLoadAvg::_Internal {
 public:
};

SystemLoadAvg::SystemLoadAvg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:badbot.messages.SystemLoadAvg)
}
SystemLoadAvg::SystemLoadAvg(const SystemLoadAvg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&onemin_, &from.onemin_,
    static_cast<size_t>(reinterpret_cast<char*>(&freeswap_) -
    reinterpret_cast<char*>(&onemin_)) + sizeof(freeswap_));
  // @@protoc_insertion_point(copy_constructor:badbot.messages.SystemLoadAvg)
}

void SystemLoadAvg::SharedCtor() {
  ::memset(&onemin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freeswap_) -
      reinterpret_cast<char*>(&onemin_)) + sizeof(freeswap_));
}

SystemLoadAvg::~SystemLoadAvg() {
  // @@protoc_insertion_point(destructor:badbot.messages.SystemLoadAvg)
  SharedDtor();
}

void SystemLoadAvg::SharedDtor() {
}

void SystemLoadAvg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemLoadAvg& SystemLoadAvg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemLoadAvg_botstatus_2eproto.base);
  return *internal_default_instance();
}


void SystemLoadAvg::Clear() {
// @@protoc_insertion_point(message_clear_start:badbot.messages.SystemLoadAvg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&onemin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freeswap_) -
      reinterpret_cast<char*>(&onemin_)) + sizeof(freeswap_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SystemLoadAvg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float oneMin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          onemin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fiveMin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fivemin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fifteenMin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fifteenmin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 numCores = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          numcores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 totalRam = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 freeRam = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          freeram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 totalSwap = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          totalswap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 freeSwap = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          freeswap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SystemLoadAvg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:badbot.messages.SystemLoadAvg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float oneMin = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &onemin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fiveMin = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fivemin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fifteenMin = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fifteenmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 numCores = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &numcores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 totalRam = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalram_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 freeRam = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freeram_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 totalSwap = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalswap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 freeSwap = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freeswap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:badbot.messages.SystemLoadAvg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:badbot.messages.SystemLoadAvg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SystemLoadAvg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:badbot.messages.SystemLoadAvg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float oneMin = 1;
  if (!(this->onemin() <= 0 && this->onemin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->onemin(), output);
  }

  // float fiveMin = 2;
  if (!(this->fivemin() <= 0 && this->fivemin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->fivemin(), output);
  }

  // float fifteenMin = 3;
  if (!(this->fifteenmin() <= 0 && this->fifteenmin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->fifteenmin(), output);
  }

  // int32 numCores = 4;
  if (this->numcores() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->numcores(), output);
  }

  // uint32 totalRam = 5;
  if (this->totalram() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->totalram(), output);
  }

  // uint32 freeRam = 6;
  if (this->freeram() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->freeram(), output);
  }

  // uint32 totalSwap = 7;
  if (this->totalswap() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->totalswap(), output);
  }

  // uint32 freeSwap = 8;
  if (this->freeswap() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->freeswap(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:badbot.messages.SystemLoadAvg)
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemLoadAvg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:badbot.messages.SystemLoadAvg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float oneMin = 1;
  if (!(this->onemin() <= 0 && this->onemin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->onemin(), target);
  }

  // float fiveMin = 2;
  if (!(this->fivemin() <= 0 && this->fivemin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->fivemin(), target);
  }

  // float fifteenMin = 3;
  if (!(this->fifteenmin() <= 0 && this->fifteenmin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->fifteenmin(), target);
  }

  // int32 numCores = 4;
  if (this->numcores() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->numcores(), target);
  }

  // uint32 totalRam = 5;
  if (this->totalram() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->totalram(), target);
  }

  // uint32 freeRam = 6;
  if (this->freeram() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->freeram(), target);
  }

  // uint32 totalSwap = 7;
  if (this->totalswap() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->totalswap(), target);
  }

  // uint32 freeSwap = 8;
  if (this->freeswap() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->freeswap(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:badbot.messages.SystemLoadAvg)
  return target;
}

size_t SystemLoadAvg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:badbot.messages.SystemLoadAvg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float oneMin = 1;
  if (!(this->onemin() <= 0 && this->onemin() >= 0)) {
    total_size += 1 + 4;
  }

  // float fiveMin = 2;
  if (!(this->fivemin() <= 0 && this->fivemin() >= 0)) {
    total_size += 1 + 4;
  }

  // float fifteenMin = 3;
  if (!(this->fifteenmin() <= 0 && this->fifteenmin() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 numCores = 4;
  if (this->numcores() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->numcores());
  }

  // uint32 totalRam = 5;
  if (this->totalram() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->totalram());
  }

  // uint32 freeRam = 6;
  if (this->freeram() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->freeram());
  }

  // uint32 totalSwap = 7;
  if (this->totalswap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->totalswap());
  }

  // uint32 freeSwap = 8;
  if (this->freeswap() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->freeswap());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemLoadAvg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:badbot.messages.SystemLoadAvg)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemLoadAvg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemLoadAvg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:badbot.messages.SystemLoadAvg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:badbot.messages.SystemLoadAvg)
    MergeFrom(*source);
  }
}

void SystemLoadAvg::MergeFrom(const SystemLoadAvg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:badbot.messages.SystemLoadAvg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.onemin() <= 0 && from.onemin() >= 0)) {
    set_onemin(from.onemin());
  }
  if (!(from.fivemin() <= 0 && from.fivemin() >= 0)) {
    set_fivemin(from.fivemin());
  }
  if (!(from.fifteenmin() <= 0 && from.fifteenmin() >= 0)) {
    set_fifteenmin(from.fifteenmin());
  }
  if (from.numcores() != 0) {
    set_numcores(from.numcores());
  }
  if (from.totalram() != 0) {
    set_totalram(from.totalram());
  }
  if (from.freeram() != 0) {
    set_freeram(from.freeram());
  }
  if (from.totalswap() != 0) {
    set_totalswap(from.totalswap());
  }
  if (from.freeswap() != 0) {
    set_freeswap(from.freeswap());
  }
}

void SystemLoadAvg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:badbot.messages.SystemLoadAvg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemLoadAvg::CopyFrom(const SystemLoadAvg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:badbot.messages.SystemLoadAvg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemLoadAvg::IsInitialized() const {
  return true;
}

void SystemLoadAvg::InternalSwap(SystemLoadAvg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(onemin_, other->onemin_);
  swap(fivemin_, other->fivemin_);
  swap(fifteenmin_, other->fifteenmin_);
  swap(numcores_, other->numcores_);
  swap(totalram_, other->totalram_);
  swap(freeram_, other->freeram_);
  swap(totalswap_, other->totalswap_);
  swap(freeswap_, other->freeswap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemLoadAvg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BotStatus::InitAsDefaultInstance() {
  ::badbot::messages::_BotStatus_default_instance_._instance.get_mutable()->sysloadavg_ = const_cast< ::badbot::messages::SystemLoadAvg*>(
      ::badbot::messages::SystemLoadAvg::internal_default_instance());
}
class BotStatus::_Internal {
 public:
  static const ::badbot::messages::SystemLoadAvg& sysloadavg(const BotStatus* msg);
};

const ::badbot::messages::SystemLoadAvg&
BotStatus::_Internal::sysloadavg(const BotStatus* msg) {
  return *msg->sysloadavg_;
}
BotStatus::BotStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:badbot.messages.BotStatus)
}
BotStatus::BotStatus(const BotStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sysloadavg()) {
    sysloadavg_ = new ::badbot::messages::SystemLoadAvg(*from.sysloadavg_);
  } else {
    sysloadavg_ = nullptr;
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&motorcontrollerhealthy_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(motorcontrollerhealthy_));
  // @@protoc_insertion_point(copy_constructor:badbot.messages.BotStatus)
}

void BotStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BotStatus_botstatus_2eproto.base);
  ::memset(&sysloadavg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motorcontrollerhealthy_) -
      reinterpret_cast<char*>(&sysloadavg_)) + sizeof(motorcontrollerhealthy_));
}

BotStatus::~BotStatus() {
  // @@protoc_insertion_point(destructor:badbot.messages.BotStatus)
  SharedDtor();
}

void BotStatus::SharedDtor() {
  if (this != internal_default_instance()) delete sysloadavg_;
}

void BotStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BotStatus& BotStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BotStatus_botstatus_2eproto.base);
  return *internal_default_instance();
}


void BotStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:badbot.messages.BotStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sysloadavg_ != nullptr) {
    delete sysloadavg_;
  }
  sysloadavg_ = nullptr;
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&motorcontrollerhealthy_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(motorcontrollerhealthy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BotStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool lidarEnabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lidarenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lidarRecordingEnabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          lidarrecordingenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.OperationalMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::badbot::messages::OperationalMode>(val));
        } else goto handle_unusual;
        continue;
      // bool appSrcEnabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          appsrcenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool wsVideoEnabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wsvideoenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool telemetryEnabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          telemetryenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool imuHealthy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          imuhealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .badbot.messages.SystemLoadAvg sysLoadAvg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sysloadavg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gpsHealthy = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          gpshealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool motorControllerHealthy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          motorcontrollerhealthy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BotStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:badbot.messages.BotStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool lidarEnabled = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lidarenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lidarRecordingEnabled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lidarrecordingenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.OperationalMode mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::badbot::messages::OperationalMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool appSrcEnabled = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &appsrcenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool wsVideoEnabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wsvideoenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool telemetryEnabled = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &telemetryenabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool imuHealthy = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &imuhealthy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .badbot.messages.SystemLoadAvg sysLoadAvg = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sysloadavg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool gpsHealthy = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gpshealthy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool motorControllerHealthy = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &motorcontrollerhealthy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:badbot.messages.BotStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:badbot.messages.BotStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BotStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:badbot.messages.BotStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool lidarEnabled = 1;
  if (this->lidarenabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->lidarenabled(), output);
  }

  // bool lidarRecordingEnabled = 2;
  if (this->lidarrecordingenabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->lidarrecordingenabled(), output);
  }

  // .badbot.messages.OperationalMode mode = 3;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // bool appSrcEnabled = 4;
  if (this->appsrcenabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->appsrcenabled(), output);
  }

  // bool wsVideoEnabled = 5;
  if (this->wsvideoenabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->wsvideoenabled(), output);
  }

  // bool telemetryEnabled = 6;
  if (this->telemetryenabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->telemetryenabled(), output);
  }

  // bool imuHealthy = 7;
  if (this->imuhealthy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->imuhealthy(), output);
  }

  // .badbot.messages.SystemLoadAvg sysLoadAvg = 8;
  if (this->has_sysloadavg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::sysloadavg(this), output);
  }

  // bool gpsHealthy = 9;
  if (this->gpshealthy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->gpshealthy(), output);
  }

  // bool motorControllerHealthy = 10;
  if (this->motorcontrollerhealthy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->motorcontrollerhealthy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:badbot.messages.BotStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* BotStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:badbot.messages.BotStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool lidarEnabled = 1;
  if (this->lidarenabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->lidarenabled(), target);
  }

  // bool lidarRecordingEnabled = 2;
  if (this->lidarrecordingenabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->lidarrecordingenabled(), target);
  }

  // .badbot.messages.OperationalMode mode = 3;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // bool appSrcEnabled = 4;
  if (this->appsrcenabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->appsrcenabled(), target);
  }

  // bool wsVideoEnabled = 5;
  if (this->wsvideoenabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->wsvideoenabled(), target);
  }

  // bool telemetryEnabled = 6;
  if (this->telemetryenabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->telemetryenabled(), target);
  }

  // bool imuHealthy = 7;
  if (this->imuhealthy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->imuhealthy(), target);
  }

  // .badbot.messages.SystemLoadAvg sysLoadAvg = 8;
  if (this->has_sysloadavg()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::sysloadavg(this), target);
  }

  // bool gpsHealthy = 9;
  if (this->gpshealthy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->gpshealthy(), target);
  }

  // bool motorControllerHealthy = 10;
  if (this->motorcontrollerhealthy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->motorcontrollerhealthy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:badbot.messages.BotStatus)
  return target;
}

size_t BotStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:badbot.messages.BotStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .badbot.messages.SystemLoadAvg sysLoadAvg = 8;
  if (this->has_sysloadavg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sysloadavg_);
  }

  // .badbot.messages.OperationalMode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  // bool lidarEnabled = 1;
  if (this->lidarenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool lidarRecordingEnabled = 2;
  if (this->lidarrecordingenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool appSrcEnabled = 4;
  if (this->appsrcenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool wsVideoEnabled = 5;
  if (this->wsvideoenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool telemetryEnabled = 6;
  if (this->telemetryenabled() != 0) {
    total_size += 1 + 1;
  }

  // bool imuHealthy = 7;
  if (this->imuhealthy() != 0) {
    total_size += 1 + 1;
  }

  // bool gpsHealthy = 9;
  if (this->gpshealthy() != 0) {
    total_size += 1 + 1;
  }

  // bool motorControllerHealthy = 10;
  if (this->motorcontrollerhealthy() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BotStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:badbot.messages.BotStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const BotStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BotStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:badbot.messages.BotStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:badbot.messages.BotStatus)
    MergeFrom(*source);
  }
}

void BotStatus::MergeFrom(const BotStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:badbot.messages.BotStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sysloadavg()) {
    mutable_sysloadavg()->::badbot::messages::SystemLoadAvg::MergeFrom(from.sysloadavg());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.lidarenabled() != 0) {
    set_lidarenabled(from.lidarenabled());
  }
  if (from.lidarrecordingenabled() != 0) {
    set_lidarrecordingenabled(from.lidarrecordingenabled());
  }
  if (from.appsrcenabled() != 0) {
    set_appsrcenabled(from.appsrcenabled());
  }
  if (from.wsvideoenabled() != 0) {
    set_wsvideoenabled(from.wsvideoenabled());
  }
  if (from.telemetryenabled() != 0) {
    set_telemetryenabled(from.telemetryenabled());
  }
  if (from.imuhealthy() != 0) {
    set_imuhealthy(from.imuhealthy());
  }
  if (from.gpshealthy() != 0) {
    set_gpshealthy(from.gpshealthy());
  }
  if (from.motorcontrollerhealthy() != 0) {
    set_motorcontrollerhealthy(from.motorcontrollerhealthy());
  }
}

void BotStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:badbot.messages.BotStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BotStatus::CopyFrom(const BotStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:badbot.messages.BotStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BotStatus::IsInitialized() const {
  return true;
}

void BotStatus::InternalSwap(BotStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sysloadavg_, other->sysloadavg_);
  swap(mode_, other->mode_);
  swap(lidarenabled_, other->lidarenabled_);
  swap(lidarrecordingenabled_, other->lidarrecordingenabled_);
  swap(appsrcenabled_, other->appsrcenabled_);
  swap(wsvideoenabled_, other->wsvideoenabled_);
  swap(telemetryenabled_, other->telemetryenabled_);
  swap(imuhealthy_, other->imuhealthy_);
  swap(gpshealthy_, other->gpshealthy_);
  swap(motorcontrollerhealthy_, other->motorcontrollerhealthy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BotStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace badbot
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::badbot::messages::SystemLoadAvg* Arena::CreateMaybeMessage< ::badbot::messages::SystemLoadAvg >(Arena* arena) {
  return Arena::CreateInternal< ::badbot::messages::SystemLoadAvg >(arena);
}
template<> PROTOBUF_NOINLINE ::badbot::messages::BotStatus* Arena::CreateMaybeMessage< ::badbot::messages::BotStatus >(Arena* arena) {
  return Arena::CreateInternal< ::badbot::messages::BotStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
