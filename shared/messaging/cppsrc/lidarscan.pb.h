// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lidarscan.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lidarscan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lidarscan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lidarscan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lidarscan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lidarscan_2eproto;
namespace badbot {
namespace messages {
class LidarPoint;
class LidarPointDefaultTypeInternal;
extern LidarPointDefaultTypeInternal _LidarPoint_default_instance_;
class LidarScan;
class LidarScanDefaultTypeInternal;
extern LidarScanDefaultTypeInternal _LidarScan_default_instance_;
}  // namespace messages
}  // namespace badbot
PROTOBUF_NAMESPACE_OPEN
template<> ::badbot::messages::LidarPoint* Arena::CreateMaybeMessage<::badbot::messages::LidarPoint>(Arena*);
template<> ::badbot::messages::LidarScan* Arena::CreateMaybeMessage<::badbot::messages::LidarScan>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace badbot {
namespace messages {

// ===================================================================

class LidarPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:badbot.messages.LidarPoint) */ {
 public:
  LidarPoint();
  virtual ~LidarPoint();

  LidarPoint(const LidarPoint& from);
  LidarPoint(LidarPoint&& from) noexcept
    : LidarPoint() {
    *this = ::std::move(from);
  }

  inline LidarPoint& operator=(const LidarPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarPoint& operator=(LidarPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarPoint* internal_default_instance() {
    return reinterpret_cast<const LidarPoint*>(
               &_LidarPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LidarPoint& a, LidarPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LidarPoint* New() const final {
    return CreateMaybeMessage<LidarPoint>(nullptr);
  }

  LidarPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarPoint& from);
  void MergeFrom(const LidarPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "badbot.messages.LidarPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidarscan_2eproto);
    return ::descriptor_table_lidarscan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kRangeFieldNumber = 2,
    kIsTrackedFieldNumber = 3,
  };
  // float angle = 1;
  void clear_angle();
  float angle() const;
  void set_angle(float value);

  // float range = 2;
  void clear_range();
  float range() const;
  void set_range(float value);

  // bool isTracked = 3;
  void clear_istracked();
  bool istracked() const;
  void set_istracked(bool value);

  // @@protoc_insertion_point(class_scope:badbot.messages.LidarPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float angle_;
  float range_;
  bool istracked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidarscan_2eproto;
};
// -------------------------------------------------------------------

class LidarScan :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:badbot.messages.LidarScan) */ {
 public:
  LidarScan();
  virtual ~LidarScan();

  LidarScan(const LidarScan& from);
  LidarScan(LidarScan&& from) noexcept
    : LidarScan() {
    *this = ::std::move(from);
  }

  inline LidarScan& operator=(const LidarScan& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarScan& operator=(LidarScan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarScan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LidarScan* internal_default_instance() {
    return reinterpret_cast<const LidarScan*>(
               &_LidarScan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LidarScan& a, LidarScan& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarScan* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LidarScan* New() const final {
    return CreateMaybeMessage<LidarScan>(nullptr);
  }

  LidarScan* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarScan>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarScan& from);
  void MergeFrom(const LidarScan& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarScan* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "badbot.messages.LidarScan";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lidarscan_2eproto);
    return ::descriptor_table_lidarscan_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScanpointsFieldNumber = 1,
  };
  // repeated .badbot.messages.LidarPoint scanpoints = 1;
  int scanpoints_size() const;
  void clear_scanpoints();
  ::badbot::messages::LidarPoint* mutable_scanpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::badbot::messages::LidarPoint >*
      mutable_scanpoints();
  const ::badbot::messages::LidarPoint& scanpoints(int index) const;
  ::badbot::messages::LidarPoint* add_scanpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::badbot::messages::LidarPoint >&
      scanpoints() const;

  // @@protoc_insertion_point(class_scope:badbot.messages.LidarScan)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::badbot::messages::LidarPoint > scanpoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lidarscan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LidarPoint

// float angle = 1;
inline void LidarPoint::clear_angle() {
  angle_ = 0;
}
inline float LidarPoint::angle() const {
  // @@protoc_insertion_point(field_get:badbot.messages.LidarPoint.angle)
  return angle_;
}
inline void LidarPoint::set_angle(float value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.LidarPoint.angle)
}

// float range = 2;
inline void LidarPoint::clear_range() {
  range_ = 0;
}
inline float LidarPoint::range() const {
  // @@protoc_insertion_point(field_get:badbot.messages.LidarPoint.range)
  return range_;
}
inline void LidarPoint::set_range(float value) {
  
  range_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.LidarPoint.range)
}

// bool isTracked = 3;
inline void LidarPoint::clear_istracked() {
  istracked_ = false;
}
inline bool LidarPoint::istracked() const {
  // @@protoc_insertion_point(field_get:badbot.messages.LidarPoint.isTracked)
  return istracked_;
}
inline void LidarPoint::set_istracked(bool value) {
  
  istracked_ = value;
  // @@protoc_insertion_point(field_set:badbot.messages.LidarPoint.isTracked)
}

// -------------------------------------------------------------------

// LidarScan

// repeated .badbot.messages.LidarPoint scanpoints = 1;
inline int LidarScan::scanpoints_size() const {
  return scanpoints_.size();
}
inline void LidarScan::clear_scanpoints() {
  scanpoints_.Clear();
}
inline ::badbot::messages::LidarPoint* LidarScan::mutable_scanpoints(int index) {
  // @@protoc_insertion_point(field_mutable:badbot.messages.LidarScan.scanpoints)
  return scanpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::badbot::messages::LidarPoint >*
LidarScan::mutable_scanpoints() {
  // @@protoc_insertion_point(field_mutable_list:badbot.messages.LidarScan.scanpoints)
  return &scanpoints_;
}
inline const ::badbot::messages::LidarPoint& LidarScan::scanpoints(int index) const {
  // @@protoc_insertion_point(field_get:badbot.messages.LidarScan.scanpoints)
  return scanpoints_.Get(index);
}
inline ::badbot::messages::LidarPoint* LidarScan::add_scanpoints() {
  // @@protoc_insertion_point(field_add:badbot.messages.LidarScan.scanpoints)
  return scanpoints_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::badbot::messages::LidarPoint >&
LidarScan::scanpoints() const {
  // @@protoc_insertion_point(field_list:badbot.messages.LidarScan.scanpoints)
  return scanpoints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace badbot

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lidarscan_2eproto
